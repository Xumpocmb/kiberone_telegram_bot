from tg_bot.handlers.inline_handlers.main_menu import get_user_keyboard
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from tg_bot.service.api_requests import find_user_in_django, get_sales_managers, get_manager, \
    get_user_group_lessons

contact_manager_router = Router()


@contact_manager_router.callback_query(F.data == "contact_manager")
async def get_managers_handler(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω–µ–¥–∂–µ—Ä".
    """
    telegram_id = str(callback.from_user.id)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await find_user_in_django(telegram_id)
        if not user_data or not user_data.get("success"):
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await callback.answer()
            return

        user = user_data.get("user", {})
        clients = user.get("clients", [])

        if not clients:
            await callback.message.answer("üîç –£ –Ω–∞—Å –Ω–µ—Ç –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            await callback.answer()
            return

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
        client = clients[0]
        user_crm_id = client.get("crm_id")
        branch_id = client.get("branch_id")

        if not user_crm_id or not branch_id:
            await callback.message.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
            await callback.answer()
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
        manager_info = await get_manager(user_crm_id, branch_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
        if not manager_info:
            await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=keyboard.as_markup())
            await callback.answer()
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        if not manager_info.get("success"):
            message = manager_info.get("message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ.")
            await callback.message.answer(f"‚ö†Ô∏è {message}", reply_markup=keyboard.as_markup())
            await callback.answer()
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        has_assigned = manager_info.get("has_assigned", False)
        if not has_assigned:
            await callback.message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.", reply_markup=keyboard.as_markup())
            await callback.answer()
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
        manager_data = manager_info.get("data", {})
        is_study = manager_info.get("is_study", False)
        manager_name = manager_data.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        manager_phone = manager_data.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        manager_email = manager_data.get("email", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        
        message_text = f"üë®‚Äçüíº <b>–í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä:</b> {manager_name}\n"
        message_text += f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {manager_phone}\n"
        message_text += f"üìß <b>Email:</b> {manager_email}\n"
        
        if is_study:
            message_text += "\nüéì <i>–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è.</i>"
        
        await callback.message.answer(message_text, reply_markup=keyboard.as_markup())
        await callback.answer()

    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()
