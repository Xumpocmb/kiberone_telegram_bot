import json
import re
import os
import aiohttp
from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)

from tg_bot.keyboards.inline_keyboards.inline_keyboard_main_menu import (
    main_menu_inline_keyboard_for_client,
    main_menu_inline_keyboard_for_lead_with_group,
    main_menu_inline_keyboard_for_lead_without_group,
)

from tg_bot.filters.filter_admin import IsAdmin
from tg_bot.configs.logger_config import get_logger
from tg_bot.service.api_requests import (
    create_or_update_clients_from_crm,
    find_user_in_crm,
    find_user_in_django,
    register_user_in_crm,
    register_user_in_db,
)

logger = get_logger()

start_router: Router = Router()

DJANGO_API_URL = os.getenv("KIBER_API_URL")


USER_STATUS_CLIENT = "2"
USER_STATUS_LEAD_WITH_GROUP = "1"
USER_STATUS_LEAD_WITHOUT_GROUP = "0"


keyboards_by_status = {
    USER_STATUS_CLIENT: main_menu_inline_keyboard_for_client,
    USER_STATUS_LEAD_WITH_GROUP: main_menu_inline_keyboard_for_lead_with_group,
    USER_STATUS_LEAD_WITHOUT_GROUP: main_menu_inline_keyboard_for_lead_without_group,
}

# -----------------------------------------------------------

# –•–ï–ù–î–õ–ï–† –°–¢–ê–†–¢

# -----------------------------------------------------------


@start_router.message(IsAdmin(), CommandStart())
async def admin_start_handler(message: Message) -> None:
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")


@start_router.message(CommandStart())
async def user_start_handler(message: Message):
    formatted_message = """
            –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –ö–∏–±–µ—Ä–®–∫–æ–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ—Ç–µ–π –æ—Ç 6 –¥–æ 14 –ª–µ—Ç  KIBERone! 
            –ú—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ–º, —á–µ–º—É —É—á–∏—Ç—å –¥–µ—Ç–µ–π, —á—Ç–æ–±—ã —ç—Ç–æ –±—ã–ª–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ 20 –ª–µ—Ç!
            ‚úÖ –¶–∏—Ñ—Ä–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å: –û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏, —Ä–∞–±–æ—Ç–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º;
            ‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏;
            ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º: —É–º–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á;
            ‚úÖ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç: –Ω–∞–≤—ã–∫–∏ –æ–±—â–µ–Ω–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏—è–º–∏ –∏ —Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ.

            <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–±–æ—Ä–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>\n

            –î–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, —É—á—Ç–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ:
            1. <b>–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</b>: –ú—ã –º–æ–∂–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—Å, —Ç–∞–∫–∏–µ –∫–∞–∫ –≤–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–º—è, —Ñ–∞–º–∏–ª–∏—é, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–µ—Å–ª–∏ –≤—ã –ø–æ–¥–µ–ª–∏–ª–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º) –∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.
            2. <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>: –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–º–∫–∞—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞. –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –∏—Ö —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ü–µ–ª–µ–π.
            3. <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</b>: –ú—ã –ø—Ä–∏–ª–∞–≥–∞–µ–º –≤—Å–µ —É—Å–∏–ª–∏—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –û–¥–Ω–∞–∫–æ, –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ –≤—Å–µ–≥–¥–∞ –±–µ–∑–æ–ø–∞—Å–µ–Ω, –∏ –º—ã –Ω–µ –º–æ–∂–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—É—é –∑–∞—â–∏—Ç—É.
            4. <b>–°–æ–≥–ª–∞—Å–∏–µ</b>: –ò—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö.
            \n\n\n
            <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.</b>

            <b>–° —É–≤–∞–∂–µ–Ω–∏–µ–º, KIBERone!</b>
            """

    telegram_id = message.from_user.id

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ KIBERone!‚ò∫Ô∏è\n"
        "–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!‚ò∫Ô∏è\n"
        "–°–µ–π—á–∞—Å –º—ã –Ω–µ–º–Ω–æ–∂–µ—á–∫–æ –ø–æ–∫–æ–ª–¥—É–µ–º –¥–ª—è –í–∞—Å ‚ú® –û–∂–∏–¥–∞–π—Ç–µ\n"
        ""
    )

    find_result: dict | None = await find_user_in_django(telegram_id)
    if find_result is None:
        await message.answer(
            f"–£–ø—Å.. –£ –Ω–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
        return
    if find_result.get("success", False):
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∏ÃÜ–¥–µ–Ω –≤ –ë–î. –û–±–Ω–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ")
        db_user: dict | None = find_result.get("user", None)
        if db_user:
            await handle_existing_user(message, db_user)
    else:
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω –≤ –ë–î. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç")
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!\n{formatted_message}"
        filename = "files/contact_image.png"
        file = types.FSInputFile(filename)
        contact_keyboard = ReplyKeyboardMarkup(
            resize_keyboard=True,
            keyboard=[
                [KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]
            ],
        )
        await message.answer(greeting, reply_markup=contact_keyboard)
        await message.answer_photo(
            file, caption="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º —Å KIBERone"
        )


async def handle_existing_user(message, db_user: dict):
    if not isinstance(db_user, dict) or "id" not in db_user:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    phone_number = db_user.get("phone_number", "")
    username = db_user.get("username", "")
    telegram_id = db_user.get("telegram_id", "")

    # –ü–æ–∏—Å–∫ –≤ —Ü—Ä–º, —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
    await handle_crm_lookup(message, phone_number, db_user)

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updated_db_user: dict = await find_user_in_django(telegram_id)
    if not updated_db_user:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )
        return

    user_status = updated_db_user.get("status", "0")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "Lead"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: {user_status}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if user_status == "2":  # –ö–ª–∏–µ–Ω—Ç
        await message.answer(
            "–í—ã –∫–ª–∏–µ–Ω—Ç!", reply_markup=main_menu_inline_keyboard_for_client
        )
    elif user_status == "1":  # Lead with group
        await message.answer(
            "–í—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å –≥—Ä—É–ø–ø–æ–π!",
            reply_markup=main_menu_inline_keyboard_for_lead_with_group,
        )
    else:  # Lead
        await message.answer(
            "–í—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç!",
            reply_markup=main_menu_inline_keyboard_for_lead_without_group,
        )


@start_router.message(F.contact)
async def handle_contact(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
    1. –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram.
    2. –ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Django.
    3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Django.
    4. –ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CRM —Å–∏—Å—Ç–µ–º–µ.
    5. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CRM, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –µ–≥–æ.
    6. –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –∏–∑ CRM –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Django.
    7. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –∑–∞–≤–∏—Å—è—â–µ–π –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    tg_user: types.User = message.from_user
    telegram_id: int = message.contact.user_id
    username: str = tg_user.username
    phone_number: str = str(re.sub(r"\D", "", message.contact.phone_number))

    # –ü–æ–∏—Å–∫ –≤ –ë–î Django
    find_result: dict | None = await find_user_in_django(telegram_id)
    print(find_result)
    if find_result.get("success", False) is False:
        registration_result: dict = await register_user_in_db(
            telegram_id, username, phone_number
        )
        print(registration_result)
        if registration_result.get("success", False):
            db_user: dict | None = registration_result.get("user", None)
            print(db_user)
            await message.answer(
                "–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üòä\n–ú—ã –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –í–∞—Å –¥–∞–Ω–Ω—ã–µ.\n–ï—â–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥–æ—á–µ–∫..",
                reply_markup=ReplyKeyboardRemove(),
            )
        else:
            await message.answer(
                f"–£–ø—Å.. –£ –Ω–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏..\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            )
            return
    else:
        db_user: dict | None = find_result.get("user", None)

    if not db_user or not isinstance(db_user, dict) or "id" not in db_user:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {db_user}")
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=ReplyKeyboardRemove(),
        )
        return

    # –ü–æ–∏—Å–∫ –≤ —Ü—Ä–º, —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
    await handle_crm_lookup(message, phone_number, db_user)

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updated_db_user: dict = await find_user_in_django(telegram_id)
    if not updated_db_user:
        await message.answer(
            "–£–ø—Å.. –ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=ReplyKeyboardRemove(),
        )
        return

    user_status = updated_db_user.get("status", "0")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "Lead"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: {user_status}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    keyboard = keyboards_by_status.get(
        user_status, main_menu_inline_keyboard_for_lead_without_group
    )
    await message.answer("–í–æ—Ç –≤–∞—à–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)


# -----------------------------------------------------------

# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò –ò–ù–§–û–†–ú–ê–¶–ò–ò

# -----------------------------------------------------------


# –ü–æ–∏—Å–∫ –≤ —Ü—Ä–º, —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
async def handle_crm_lookup(message: Message, phone_number: str, db_user: dict):
    try:
        logger.info(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CRM –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}")
        search_crm_response: dict = await find_user_in_crm(phone_number)
        # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ü—Ä–º
        if not search_crm_response:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CRM.")
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ CRM.\n–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º...")
            register_response: dict = await register_user_in_crm(message, phone_number)
            crm_items: list = parse_crm_response(register_response)

            logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ü—Ä–º")
            response_data: dict = await create_or_update_clients_from_crm(
                db_user, crm_items
            )
            if not response_data:
                await message.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return
            created = response_data.get("created", 0)
            updated = response_data.get("updated", 0)
            deleted = response_data.get("deleted", 0)
            await message.answer(
                f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {created}\n"
                f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {updated}\n"
                f"–£–¥–∞–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {deleted}"
            )
            await message.answer(
                "–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞!", reply_markup=ReplyKeyboardRemove()
            )
            return

        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ü—Ä–º
        await message.answer("–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.. –ö–æ–ª–¥—É—é ü™Ñ!")
        total_clients: int = search_crm_response.get("total", 0)
        items: list = search_crm_response.get("items", [])

        if total_clients == 0:
            return
        else:
            response_data = await create_or_update_clients_from_crm(db_user, items)
            if not response_data:
                await message.answer(
                    "–£–ø—Å, —Å–ª–æ–º–∞–ª–æ—Å—å.. ü•∫ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return

            created = response_data.get("created", 0)
            updated = response_data.get("updated", 0)
            deleted = response_data.get("deleted", 0)
            logger.info(
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: created:{created}, updated:{updated}, deleted:{deleted}"
            )
            await message.answer("–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞! üí´")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å CRM: {str(e)}")
        await message.answer(
            "–£–ø—Å, —Å–ª–æ–º–∞–ª–æ—Å—å.. ü•∫ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


def parse_crm_response(register_response: dict) -> list:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç CRM –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π.
    """
    data: list = register_response.get("data", [])
    crm_items: list = []

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–Ω—É
    full_json_str = "".join(data)

    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ JSON-–æ–±—ä–µ–∫—Ç—ã
        items = json.loads(f"[{full_json_str}]")
        for item in items:
            model_data = item.get("model")
            if model_data:
                crm_items.append(model_data)
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON: {e}")

    return crm_items
