import json
import os
import re

from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup,
)

from tg_bot.configs.logger_config import get_logger
from tg_bot.configs.bot_messages import *
from tg_bot.filters.filter_admin import IsAdmin
from tg_bot.handlers.inline_handlers.main_menu import get_user_keyboard
from tg_bot.service.api_requests import (
    create_or_update_clients_from_crm,
    find_user_in_crm,
    find_user_in_django,
    register_user_in_crm,
    register_user_in_db, get_user_tg_links_from_api,
)

logger = get_logger()

start_router: Router = Router()




# -----------------------------------------------------------

# –•–ï–ù–î–õ–ï–† –°–¢–ê–†–¢

# -----------------------------------------------------------
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ bot_messages.py

@start_router.message(IsAdmin(), CommandStart())
async def admin_start_handler(message: Message) -> None:
    await message.answer(START_ADMIN_GREETING)


@start_router.message(CommandStart())
async def user_start_handler(message: Message):
    telegram_id: str = str(message.from_user.id)

    await message.answer(START_WELCOME)

    find_result: dict | None = await find_user_in_django(telegram_id)
    if find_result is not None:
        if find_result.get("success"):
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –û–±–Ω–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ")
            db_user: dict | None = find_result.get("user", None)
            if db_user:
                await handle_existing_user(message, db_user)
        else:
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç")
            greeting = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!\n{FORMATTED_WELCOME_MESSAGE}"
            filename = os.path.abspath("tg_bot/files/contact_image.png")
            file = types.FSInputFile(filename)
            contact_keyboard = ReplyKeyboardMarkup(
                resize_keyboard=True,
                keyboard=[
                    [KeyboardButton(text=START_CONTACT_BUTTON, request_contact=True)]
                ],
            )
            await message.answer(greeting, reply_markup=contact_keyboard)
            await message.answer_photo(
                file, caption=START_CONTACT_CAPTION
            )
    else:
        await message.answer(START_ERROR_SERVICE)


async def handle_existing_user(message, db_user: dict):
    if not isinstance(db_user, dict) or "id" not in db_user:
        await message.answer(START_ERROR_USER_DATA)
        return

    phone_number = db_user.get("phone_number", "")
    telegram_id: str = db_user.get("telegram_id", "")

    # –ü–æ–∏—Å–∫ –≤ —Ü—Ä–º, —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
    await handle_crm_lookup(message, phone_number, db_user)

    buttons = [
        InlineKeyboardButton(
            text="–ì–ª–∞–≤–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª KIBERone", url="https://t.me/kiberone_bel"
        )
    ]

    links = await get_user_tg_links_from_api(telegram_id)

    if links:
        for link in links:
            if link.startswith("https://t.me/"):
                buttons.append(InlineKeyboardButton(text="–ß–∞—Ç –≥—Ä—É–ø–ø—ã", url=str(link)))

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[button] for button in buttons],
        resize_keyboard=True,
        input_field_placeholder="–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–∞–º –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã..",
    )
    await message.answer(START_TELEGRAM_LINKS, reply_markup=keyboard)

    await message.answer(START_MENU, reply_markup=await get_user_keyboard(telegram_id))


@start_router.message(F.contact)
async def handle_contact(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞.
    """
    tg_user: types.User = message.from_user
    telegram_id: str = str(message.contact.user_id)
    username: str = tg_user.username if tg_user.username else "nousername"
    phone_number: str = str(re.sub(r"\D", "", message.contact.phone_number))

    # –ü–æ–∏—Å–∫ –≤ –ë–î Django
    find_result: dict | None = await find_user_in_django(telegram_id)
    if find_result.get("success", False) is False:
        registration_result: dict = await register_user_in_db(telegram_id, username, phone_number)
        if registration_result.get("success", False):
            db_user: dict | None = registration_result.get("user", None)
            await message.answer(START_CONTACT_SAVED,
                                 reply_markup=ReplyKeyboardRemove())
        else:
            await message.answer(START_ERROR_REGISTRATION)
            return
    else:
        db_user: dict | None = find_result.get("user", None)

    if not db_user or not isinstance(db_user, dict) or "id" not in db_user:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {db_user}")
        await message.answer(START_ERROR_USER_DATA, reply_markup=ReplyKeyboardRemove())
        return

    # –ü–æ–∏—Å–∫ –≤ —Ü—Ä–º, —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
    await handle_crm_lookup(message, phone_number, db_user)

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updated_db_user: dict = await find_user_in_django(telegram_id)
    if not updated_db_user:
        await message.answer(
            START_ERROR_UPDATE_DATA,
            reply_markup=ReplyKeyboardRemove(), )
        return

    user_status = updated_db_user.get("status", "0")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "Lead"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: {user_status}")

    buttons = [
        InlineKeyboardButton(
            text="–ì–ª–∞–≤–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª KIBERone", url="https://t.me/kiberone_bel"
        )
    ]

    links = await get_user_tg_links_from_api(telegram_id)

    if links:
        for link in links:
            if link.startswith("https://t.me/"):
                buttons.append(InlineKeyboardButton(text="–ß–∞—Ç –≥—Ä—É–ø–ø—ã", url=str(link)))

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[button] for button in buttons],
        resize_keyboard=True,
        input_field_placeholder=TG_LINKS_PLACEHOLDER,
    )
    await message.answer(START_TELEGRAM_LINKS, reply_markup=keyboard)

    # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    # await message.answer("–í–æ—Ç –º–æ–µ –º–µ–Ω—é ü§ó:", reply_markup=await get_user_keyboard(telegram_id))


# -----------------------------------------------------------

# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò –ò–ù–§–û–†–ú–ê–¶–ò–ò

# -----------------------------------------------------------


# –ü–æ–∏—Å–∫ –≤ —Ü—Ä–º, —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
async def handle_crm_lookup(message: Message, phone_number: str, db_user: dict):
    try:
        logger.info(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CRM –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}")
        search_crm_response: dict = await find_user_in_crm(phone_number)
        if not search_crm_response:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CRM.")
            await message.answer(CRM_NOT_REGISTERED)
            register_response: dict = await register_user_in_crm(message, phone_number)
            crm_items: list = parse_crm_response(register_response)

            logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ü—Ä–º")
            response_data: dict = await create_or_update_clients_from_crm(db_user, crm_items)
            if not response_data:
                await message.answer(CRM_UPDATE_FAILED)
                return
            created = response_data.get("created", 0)
            updated = response_data.get("updated", 0)
            deleted = response_data.get("deleted", 0)
            await message.answer(CRM_INFO_UPDATED, reply_markup=ReplyKeyboardRemove())
            return

        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ü—Ä–º
        await message.answer(CRM_CHECKING_DATA)
        total_clients: int = search_crm_response.get("total", 0)
        items: list = search_crm_response.get("items", [])

        if total_clients == 0:
            return
        else:
            response_data = await create_or_update_clients_from_crm(db_user, items)
            if not response_data:
                await message.answer(CRM_UPDATE_ERROR)
                return

            created = response_data.get("created", 0)
            updated = response_data.get("updated", 0)
            deleted = response_data.get("deleted", 0)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: created:{created}, updated:{updated}, deleted:{deleted}")
            await message.answer(CRM_INFO_UPDATED_STAR)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å CRM: {str(e)}")
        await message.answer(CRM_CHECK_ERROR)


def parse_crm_response(register_response: dict) -> list:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç CRM –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π.
    """
    data: list = register_response.get("data", [])
    crm_items: list = []

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–Ω—É
    full_json_str = "".join(data)

    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ JSON-–æ–±—ä–µ–∫—Ç—ã
        items = json.loads(f"[{full_json_str}]")
        for item in items:
            model_data = item.get("model")
            if model_data:
                crm_items.append(model_data)
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON: {e}")

    return crm_items
